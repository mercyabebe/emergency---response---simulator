Object-Oriented Design
The design of the system adheres to the key principles of Object-Oriented Programming (OOP): Encapsulation, Inheritance, Abstraction, and Polymorphism. Here's a breakdown of how each principle is applied:

Encapsulation:
Each class has its own properties and methods, and the internal details of how each unit responds to an incident are hidden from the main program. The EmergencyUnit abstract class encapsulates common behaviors and attributes for all units.

Inheritance:
The classes Police, Firefighter, Ambulance, and SearchAndRescue all inherit from the abstract EmergencyUnit class, thus sharing common functionality while allowing for their specific behavior to be defined.

Abstraction:
The EmergencyUnit class provides abstract methods CanHandle() and RespondToIncident(). This enforces that all subclasses must implement their specific behavior for handling incidents.

Polymorphism:
The system uses polymorphism to allow the RespondToIncident method to behave differently based on the type of unit selected, without needing to know the specific type of the unit at runtime.

Code Functionality
The core functionality of the program involves:

Incident Generation:
The program prompts the user to select an incident type from a list (e.g., Fire, Crime, Medical, Earthquake, Flood). A random location and difficulty level are then assigned to the incident.

Unit Selection:
Users can manually or automatically select an emergency unit. The automatic selection tries to choose a unit that can handle the selected incident type. If no unit can handle the incident, the system penalizes the player.

Incident Response:
Once a unit is selected, the unit responds to the incident. Each unit’s RespondToIncident method calculates and prints the response time, which depends on the unit's speed and the incident's difficulty.

Scoring:
The system maintains a score. The user earns points based on the incident’s difficulty (10 points per difficulty level) if the correct unit is selected. If the wrong unit is selected, the user loses points.

Game Loop:
The simulation runs for five turns, during which the user interacts with the system and tries to accumulate points.

Code Organization and Clarity
Class Structure:
The code is organized into clear and concise classes:

EmergencyUnit (abstract class) serves as the base for specific units.

Police, Firefighter, Ambulance, SearchAndRescue represent specific types of emergency response units, each with tailored methods for handling incidents.

Incident stores details about the incident, such as type, location, and difficulty.

Methods and Responsibilities:

The CanHandle() method in each subclass determines if a unit can respond to the incident.

The RespondToIncident() method implements the specific logic for how the unit responds to the incident.

Scoring System:
Points are awarded based on the difficulty of the incident and the unit's ability to handle it. The user loses points if they select the wrong unit or if no unit is available for the incident.

Class Structure Diagram
The following diagram represents the class structure of the program:

pgsql
Copy
Edit
                    +------------------+
                    |  EmergencyUnit   |
                    +------------------+
                    | - Name           |
                    | - Speed          |
                    +------------------+
                    | + CanHandle()    |
                    | + RespondToIncident() |
                    +--------|---------+
                             |
        +--------------------------------------------+
        |                                            |
+---------------+                           +---------------+
|    Police     |                           |  Firefighter  |
+---------------+                           +---------------+
| + CanHandle() |                           | + CanHandle() |
| + RespondToIncident()|                     | + RespondToIncident()|
+---------------+                           +---------------+
        |
+---------------+                           +---------------+
|  Ambulance    |                           | SearchAndRescue|
+---------------+                           +---------------+
| + CanHandle() |                           | + CanHandle()  |
| + RespondToIncident()|                     | + RespondToIncident() |
+---------------+                           +---------------+
                             |
                    +------------------+
                    |     Incident     |
                    +------------------+
                    | - Type           |
                    | - Location       |
                    | - Difficulty     |
                    +------------------+
                    | + Incident()     |
                    +------------------+
Suggestions for Improvement
Error Handling:
The program could benefit from additional input validation and error handling, particularly in cases where users enter invalid numbers or choose options that may cause the program to crash (e.g., choosing a non-existent unit).

Extensibility:
The system could be extended to include more types of incidents or emergency units. For instance, additional classes such as MedicalUnit, HazmatUnit, or others can be added to diversify the simulation.

User Interface:
For further usability, consider developing a graphical user interface (GUI) that can visualize the response of the units and display a clearer, more engaging simulation of the emergency response process.

Conclusion
